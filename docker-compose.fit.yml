# Copyright The OpenTelemetry Authors
# SPDX-License-Identifier: Apache-2.0

x-default-logging: &logging
  driver: "json-file"
  options:
    max-size: "5m"
    max-file: "2"
    tag: "{{.Name}}"

networks:
  default:
    name: opentelemetry-demo
    driver: bridge

services:
  fit-controller:
    image: ${FIT_CONTROLLER_IMAGE}
    container_name: fit-controller
    environment:
      - PROXY_LIST=ad-proxy:${FIT_CONTROLLER_PORT},cart-proxy:${FIT_CONTROLLER_PORT},checkout-proxy:${FIT_CONTROLLER_PORT},currency-proxy:${FIT_CONTROLLER_PORT},email-proxy:${FIT_CONTROLLER_PORT},payment-proxy:${FIT_CONTROLLER_PORT},product-catalog-proxy:${FIT_CONTROLLER_PORT},quote-proxy:${FIT_CONTROLLER_PORT},recommendation-proxy:${FIT_CONTROLLER_PORT},shipping-proxy:${FIT_CONTROLLER_PORT}
    ports:
      - ${ORCHESTRATOR_PORT}:${ORCHESTRATOR_PORT}

  # ******************
  # Core Demo Services
  # ******************

  ad-proxy:
    image: ${FIT_PROXY_IMAGE}
    container_name: ad-proxy
    environment:
      - SERVICE_NAME=ad
      - PROXY_HOST=0.0.0.0:${AD_PORT}
      - PROXY_TARGET=http://ad:${AD_PORT}
      - CONTROLLER_PORT=${FIT_CONTROLLER_PORT}
      - USE_HTTP2=true
      - ORCHESTRATOR_HOST

  # AdService
  ad:
    image: ${IMAGE_NAME}:${DEMO_VERSION}-ad
    container_name: ad
    build:
      context: ./
      dockerfile: ${AD_DOCKERFILE}
      cache_from:
        - ${IMAGE_NAME}:${IMAGE_VERSION}-ad
      args:
        OTEL_JAVA_AGENT_VERSION: ${OTEL_JAVA_AGENT_VERSION}
    deploy:
      resources:
        limits:
          memory: 300M
    restart: unless-stopped
    ports:
      - "${AD_PORT}"
    environment:
      - AD_PORT
      - FLAGD_HOST
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://${OTEL_COLLECTOR_HOST}:${OTEL_COLLECTOR_PORT_HTTP}
      - OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
      - OTEL_RESOURCE_ATTRIBUTES
      - OTEL_LOGS_EXPORTER=otlp
      - OTEL_SERVICE_NAME=ad
      - OTEL_BSP_SCHEDULE_DELAY
      - OTEL_TRACES_SAMPLER
      # Workaround on OSX for https://bugs.openjdk.org/browse/JDK-8345296
      - _JAVA_OPTIONS
    depends_on:
      otel-collector:
        condition: service_started
    logging: *logging

  # Cart service

  cart-proxy:
    image: ${FIT_PROXY_IMAGE}
    container_name: cart-proxy
    environment:
      - SERVICE_NAME=cart
      - PROXY_HOST=0.0.0.0:${CART_PORT}
      - PROXY_TARGET=http://cart:${CART_PORT}
      - CONTROLLER_PORT=${FIT_CONTROLLER_PORT}
      - USE_HTTP2=true
      - ORCHESTRATOR_HOST

  cart:
    image: ${IMAGE_NAME}:${DEMO_VERSION}-cart
    container_name: cart
    build:
      context: ./
      dockerfile: ${CART_DOCKERFILE}
      cache_from:
        - ${IMAGE_NAME}:${IMAGE_VERSION}-cart
    deploy:
      resources:
        limits:
          memory: 160M
    restart: unless-stopped
    ports:
      - "${CART_PORT}"
    environment:
      - CART_PORT
      - FLAGD_HOST
      - VALKEY_ADDR
      - OTEL_BSP_SCHEDULE_DELAY
      - OTEL_TRACES_SAMPLER
      - OTEL_EXPORTER_OTLP_ENDPOINT
      - OTEL_RESOURCE_ATTRIBUTES
      - OTEL_SERVICE_NAME=cart
      - ASPNETCORE_URLS=http://*:${CART_PORT}
    depends_on:
      valkey-cart:
        condition: service_started
      otel-collector:
        condition: service_started
    logging: *logging

  # Checkout service
  checkout-proxy:
    image: ${FIT_PROXY_IMAGE}
    container_name: checkout-proxy
    environment:
      - SERVICE_NAME=checkout
      - PROXY_HOST=0.0.0.0:${CHECKOUT_PORT}
      - PROXY_TARGET=http://checkout:${CHECKOUT_PORT}
      - CONTROLLER_PORT=${FIT_CONTROLLER_PORT}
      - USE_HTTP2=true
      - ORCHESTRATOR_HOST

  checkout:
    image: ${IMAGE_NAME}:${DEMO_VERSION}-checkout
    container_name: checkout
    build:
      context: ./
      dockerfile: ${CHECKOUT_DOCKERFILE}
      cache_from:
        - ${IMAGE_NAME}:${IMAGE_VERSION}-checkout
    deploy:
      resources:
        limits:
          memory: 20M
    restart: unless-stopped
    ports:
      - "${CHECKOUT_PORT}"
    environment:
      - CHECKOUT_PORT
      - CART_ADDR
      - CURRENCY_ADDR
      - EMAIL_ADDR
      - FLAGD_HOST
      - PAYMENT_ADDR
      - PRODUCT_CATALOG_ADDR
      - SHIPPING_ADDR
      - OTEL_EXPORTER_OTLP_ENDPOINT
      - OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
      - OTEL_RESOURCE_ATTRIBUTES
      - OTEL_BSP_SCHEDULE_DELAY
      - OTEL_TRACES_SAMPLER
      - OTEL_SERVICE_NAME=checkout
    depends_on:
      cart:
        condition: service_started
      currency:
        condition: service_started
      email:
        condition: service_started
      payment:
        condition: service_started
      product-catalog:
        condition: service_started
      shipping:
        condition: service_started
      otel-collector:
        condition: service_started
    logging: *logging

  # Currency service
  currency-proxy:
    image: ${FIT_PROXY_IMAGE}
    container_name: currency-proxy
    environment:
      - SERVICE_NAME=currency
      - PROXY_HOST=0.0.0.0:${CURRENCY_PORT}
      - PROXY_TARGET=http://currency:${CURRENCY_PORT}
      - CONTROLLER_PORT=${FIT_CONTROLLER_PORT}
      - USE_HTTP2=true
      - ORCHESTRATOR_HOST
  currency:
    image: ${IMAGE_NAME}:${DEMO_VERSION}-currency
    container_name: currency
    build:
      context: ./
      dockerfile: ${CURRENCY_DOCKERFILE}
      cache_from:
        - ${IMAGE_NAME}:${IMAGE_VERSION}-currency
      args:
        OPENTELEMETRY_CPP_VERSION: ${OPENTELEMETRY_CPP_VERSION}
    deploy:
      resources:
        limits:
          memory: 20M
    restart: unless-stopped
    ports:
      - "${CURRENCY_PORT}"
    environment:
      - CURRENCY_PORT
      - VERSION=${IMAGE_VERSION}
      - OTEL_EXPORTER_OTLP_ENDPOINT
      - OTEL_RESOURCE_ATTRIBUTES=${OTEL_RESOURCE_ATTRIBUTES},service.name=currency # The C++ SDK does not support OTEL_SERVICE_NAME
      - OTEL_BSP_SCHEDULE_DELAY
      - OTEL_TRACES_SAMPLER
    depends_on:
      otel-collector:
        condition: service_started
    logging: *logging

  # Email service
  email-proxy:
    image: ${FIT_PROXY_IMAGE}
    container_name: email-proxy
    environment:
      - SERVICE_NAME=email
      - PROXY_HOST=0.0.0.0:${EMAIL_PORT}
      - PROXY_TARGET=http://email:${EMAIL_PORT}
      - CONTROLLER_PORT=${FIT_CONTROLLER_PORT}
      - ORCHESTRATOR_HOST
      # - USE_HTTP2=true
  email:
    image: ${IMAGE_NAME}:${DEMO_VERSION}-email
    container_name: email
    build:
      context: ./src/email
      cache_from:
        - ${IMAGE_NAME}:${IMAGE_VERSION}-email
    deploy:
      resources:
        limits:
          memory: 100M
    restart: unless-stopped
    ports:
      - "${EMAIL_PORT}"
    environment:
      - APP_ENV=production
      - EMAIL_PORT
      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://${OTEL_COLLECTOR_HOST}:${OTEL_COLLECTOR_PORT_HTTP}/v1/traces
      - OTEL_RESOURCE_ATTRIBUTES
      - OTEL_SERVICE_NAME=email
      - OTEL_BSP_SCHEDULE_DELAY
      - OTEL_TRACES_SAMPLER
    depends_on:
      otel-collector:
        condition: service_started
    logging: *logging

  # Frontend
  frontend:
    image: ${IMAGE_NAME}:${DEMO_VERSION}-frontend
    container_name: frontend
    build:
      context: ./
      dockerfile: ${FRONTEND_DOCKERFILE}
      cache_from:
        - ${IMAGE_NAME}:${IMAGE_VERSION}-frontend
    deploy:
      resources:
        limits:
          memory: 250M
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT}"
    environment:
      - NEXT_OTEL_VERBOSE=1
      - NEXT_DEBUG=true
      - PORT=${FRONTEND_PORT}
      - FRONTEND_ADDR
      - AD_ADDR
      - CART_ADDR
      - CHECKOUT_ADDR
      - CURRENCY_ADDR
      - PRODUCT_CATALOG_ADDR
      - RECOMMENDATION_ADDR
      - SHIPPING_ADDR
      - OTEL_TRACES_SAMPLER
      - OTEL_BSP_SCHEDULE_DELAY
      - OTEL_EXPORTER_OTLP_ENDPOINT
      - OTEL_RESOURCE_ATTRIBUTES=${OTEL_RESOURCE_ATTRIBUTES}
      - ENV_PLATFORM
      - OTEL_SERVICE_NAME=frontend
      - PUBLIC_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
      - OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
      - WEB_OTEL_SERVICE_NAME=frontend-web
      - OTEL_COLLECTOR_HOST
      - FLAGD_HOST
      - FLAGD_PORT
    depends_on:
      ad:
        condition: service_started
      cart:
        condition: service_started
      checkout:
        condition: service_started
      currency:
        condition: service_started
      product-catalog:
        condition: service_started
      quote:
        condition: service_started
      recommendation:
        condition: service_started
      shipping:
        condition: service_started
      otel-collector:
        condition: service_started
      image-provider:
        condition: service_started
    logging: *logging

  # Frontend Proxy (Envoy)
  frontend-proxy:
    image: ${IMAGE_NAME}:${DEMO_VERSION}-frontend-proxy
    container_name: frontend-proxy
    build:
      context: ./
      dockerfile: ${FRONTEND_PROXY_DOCKERFILE}
    deploy:
      resources:
        limits:
          memory: 65M
    restart: unless-stopped
    ports:
      - "${ENVOY_PORT}:${ENVOY_PORT}"
      - 10000:10000
    environment:
      - FRONTEND_PORT
      - FRONTEND_HOST
      - LOCUST_WEB_HOST
      - LOCUST_WEB_PORT
      - GRAFANA_PORT
      - GRAFANA_HOST
      - JAEGER_PORT
      - JAEGER_HOST
      - OTEL_COLLECTOR_HOST
      - IMAGE_PROVIDER_HOST
      - IMAGE_PROVIDER_PORT
      - OTEL_COLLECTOR_PORT_GRPC
      - OTEL_COLLECTOR_PORT_HTTP
      - OTEL_RESOURCE_ATTRIBUTES
      - OTEL_SERVICE_NAME=frontend-proxy
      - ENVOY_PORT
      - FLAGD_HOST
      - FLAGD_PORT
      - FLAGD_UI_HOST
      - FLAGD_UI_PORT
    depends_on:
      frontend:
        condition: service_started
      jaeger:
        condition: service_started
    dns_search: ""

  # image-provider
  image-provider:
    image: ${IMAGE_NAME}:${DEMO_VERSION}-image-provider
    container_name: image-provider
    build:
      context: ./
      dockerfile: ${IMAGE_PROVIDER_DOCKERFILE}
      cache_from:
        - ${IMAGE_NAME}:${IMAGE_VERSION}-image-provider
    deploy:
      resources:
        limits:
          memory: 120M
    restart: unless-stopped
    ports:
      - "${IMAGE_PROVIDER_PORT}"
    environment:
      - IMAGE_PROVIDER_PORT
      - OTEL_COLLECTOR_HOST
      - OTEL_COLLECTOR_PORT_GRPC
      - OTEL_SERVICE_NAME=image-provider
      - OTEL_RESOURCE_ATTRIBUTES
    depends_on:
      otel-collector:
        condition: service_started
    logging: *logging

  # Payment service
  payment-proxy:
    image: ${FIT_PROXY_IMAGE}
    container_name: payment-proxy
    environment:
      - SERVICE_NAME=payment
      - PROXY_HOST=0.0.0.0:${PAYMENT_PORT}
      - PROXY_TARGET=http://payment:${PAYMENT_PORT}
      - CONTROLLER_PORT=${FIT_CONTROLLER_PORT}
      - USE_HTTP2=true
      - ORCHESTRATOR_HOST
  payment:
    image: ${IMAGE_NAME}:${DEMO_VERSION}-payment
    container_name: payment
    build:
      context: ./
      dockerfile: ${PAYMENT_DOCKERFILE}
      cache_from:
        - ${IMAGE_NAME}:${IMAGE_VERSION}-payment
    deploy:
      resources:
        limits:
          memory: 120M
    restart: unless-stopped
    ports:
      - "${PAYMENT_PORT}"
    environment:
      - FLAGD_HOST
      - PAYMENT_PORT
      - OTEL_EXPORTER_OTLP_ENDPOINT
      - OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
      - OTEL_RESOURCE_ATTRIBUTES
      - OTEL_BSP_SCHEDULE_DELAY
      - OTEL_TRACES_SAMPLER
      - OTEL_SERVICE_NAME=payment
    depends_on:
      otel-collector:
        condition: service_started
    logging: *logging

  # Product Catalog service
  product-catalog-proxy:
    image: ${FIT_PROXY_IMAGE}
    container_name: product-catalog-proxy
    environment:
      - SERVICE_NAME=product-catalog
      - PROXY_HOST=0.0.0.0:${PRODUCT_CATALOG_PORT}
      - PROXY_TARGET=http://product-catalog:${PRODUCT_CATALOG_PORT}
      - CONTROLLER_PORT=${FIT_CONTROLLER_PORT}
      - USE_HTTP2=true
      - ORCHESTRATOR_HOST
  product-catalog:
    image: ${IMAGE_NAME}:${DEMO_VERSION}-product-catalog
    container_name: product-catalog
    build:
      context: ./
      dockerfile: ${PRODUCT_CATALOG_DOCKERFILE}
      cache_from:
        - ${IMAGE_NAME}:${IMAGE_VERSION}-product-catalog
    deploy:
      resources:
        limits:
          memory: 20M
    restart: unless-stopped
    ports:
      - "${PRODUCT_CATALOG_PORT}"
    environment:
      - FLAGD_HOST
      - PRODUCT_CATALOG_PORT
      - PRODUCT_CATALOG_RELOAD_INTERVAL
      - OTEL_EXPORTER_OTLP_ENDPOINT
      - OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
      - OTEL_RESOURCE_ATTRIBUTES
      - OTEL_BSP_SCHEDULE_DELAY
      - OTEL_TRACES_SAMPLER
      - OTEL_SERVICE_NAME=product-catalog
    volumes:
      - ./src/product-catalog/products:/usr/src/app/products
    depends_on:
      otel-collector:
        condition: service_started
    logging: *logging

  # Quote service
  quote-proxy:
    image: ${FIT_PROXY_IMAGE}
    container_name: quote-proxy
    environment:
      - SERVICE_NAME=quote
      - PROXY_HOST=0.0.0.0:${QUOTE_PORT}
      - PROXY_TARGET=http://quote:${QUOTE_PORT}
      - CONTROLLER_PORT=${FIT_CONTROLLER_PORT}
      # - USE_HTTP2=true
      - ORCHESTRATOR_HOST
  quote:
    image: ${IMAGE_NAME}:${DEMO_VERSION}-quote
    container_name: quote
    build:
      context: ./
      dockerfile: ${QUOTE_DOCKERFILE}
      cache_from:
        - ${IMAGE_NAME}:${IMAGE_VERSION}-quote
    deploy:
      resources:
        limits:
          memory: 40M
    restart: unless-stopped
    ports:
      - "${QUOTE_PORT}"
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://${OTEL_COLLECTOR_HOST}:${OTEL_COLLECTOR_PORT_HTTP}
      - OTEL_PHP_AUTOLOAD_ENABLED=true
      - QUOTE_PORT
      - OTEL_RESOURCE_ATTRIBUTES
      - OTEL_BSP_SCHEDULE_DELAY
      - OTEL_TRACES_SAMPLER
      - OTEL_SERVICE_NAME=quote
      - OTEL_PHP_INTERNAL_METRICS_ENABLED=true
    depends_on:
      otel-collector:
        condition: service_started
    logging: *logging

  # Recommendation service
  recommendation-proxy:
    image: ${FIT_PROXY_IMAGE}
    container_name: recommendation-proxy
    environment:
      - SERVICE_NAME=recommendation
      - PROXY_HOST=0.0.0.0:${RECOMMENDATION_PORT}
      - PROXY_TARGET=http://recommendation:${RECOMMENDATION_PORT}
      - CONTROLLER_PORT=${FIT_CONTROLLER_PORT}
      - USE_HTTP2=true
      - ORCHESTRATOR_HOST
  recommendation:
    image: ${IMAGE_NAME}:${DEMO_VERSION}-recommendation
    container_name: recommendation
    build:
      context: ./
      dockerfile: ${RECOMMENDATION_DOCKERFILE}
      cache_from:
        - ${IMAGE_NAME}:${IMAGE_VERSION}-recommendation
    deploy:
      resources:
        limits:
          memory: 50M
    restart: unless-stopped
    ports:
      - "${RECOMMENDATION_PORT}"
    environment:
      - FLAGD_HOST
      - RECOMMENDATION_PORT
      - PRODUCT_CATALOG_ADDR
      - OTEL_PYTHON_LOG_CORRELATION=true
      - OTEL_EXPORTER_OTLP_ENDPOINT
      - OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
      - OTEL_RESOURCE_ATTRIBUTES
      - OTEL_BSP_SCHEDULE_DELAY
      - OTEL_TRACES_SAMPLER
      - OTEL_SERVICE_NAME=recommendation
      - PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python
    depends_on:
      product-catalog:
        condition: service_started
      otel-collector:
        condition: service_started
    logging: *logging

  # Shipping service
  shipping-proxy:
    image: ${FIT_PROXY_IMAGE}
    container_name: shipping-proxy
    environment:
      - SERVICE_NAME=shipping
      - PROXY_HOST=0.0.0.0:${SHIPPING_PORT}
      - PROXY_TARGET=http://shipping:${SHIPPING_PORT}
      - CONTROLLER_PORT=${FIT_CONTROLLER_PORT}
      - USE_HTTP2=true
      - ORCHESTRATOR_HOST
  shipping:
    image: ${IMAGE_NAME}:${DEMO_VERSION}-shipping
    container_name: shipping
    build:
      context: ./
      dockerfile: ${SHIPPING_DOCKERFILE}
      cache_from:
        - ${IMAGE_NAME}:${IMAGE_VERSION}-shipping
    deploy:
      resources:
        limits:
          memory: 20M
    restart: unless-stopped
    ports:
      - "${SHIPPING_PORT}"
    environment:
      - SHIPPING_PORT
      - QUOTE_ADDR
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://${OTEL_COLLECTOR_HOST}:${OTEL_COLLECTOR_PORT_GRPC}
      - OTEL_RESOURCE_ATTRIBUTES
      - OTEL_BSP_SCHEDULE_DELAY
      - OTEL_TRACES_SAMPLER
      - OTEL_SERVICE_NAME=shipping
    depends_on:
      otel-collector:
        condition: service_started
    logging: *logging

  # ******************
  # Dependent Services
  # ******************
  # Flagd, feature flagging service
  flagd:
    image: ${FLAGD_IMAGE}
    container_name: flagd
    deploy:
      resources:
        limits:
          memory: 75M
    environment:
      - FLAGD_OTEL_COLLECTOR_URI=${OTEL_COLLECTOR_HOST}:${OTEL_COLLECTOR_PORT_GRPC}
      - FLAGD_METRICS_EXPORTER=otel
      - OTEL_RESOURCE_ATTRIBUTES
      - OTEL_BSP_SCHEDULE_DELAY
      - OTEL_TRACES_SAMPLER
      - OTEL_SERVICE_NAME=flagd
    command: [ "start", "--uri", "file:./etc/flagd/demo.flagd.json" ]
    ports:
      - 8013
    volumes:
      - ./src/flagd:/etc/flagd
    logging: *logging

  # Valkey used by Cart service
  valkey-cart:
    image: ${VALKEY_IMAGE}
    container_name: valkey-cart
    user: valkey
    deploy:
      resources:
        limits:
          memory: 20M
    restart: unless-stopped
    ports:
      - "${VALKEY_PORT}"
    logging: *logging

  # ********************
  # Telemetry Components
  # ********************
  # Jaeger
  jaeger:
    image: ${JAEGERTRACING_IMAGE}
    container_name: jaeger
    command:
      - "--memory.max-traces=5000"
      - "--query.base-path=/jaeger/ui"
      # - "--prometheus.server-url=http://${PROMETHEUS_ADDR}"
      # - "--prometheus.query.normalize-calls=true"
      # - "--prometheus.query.normalize-duration=true"
    deploy:
      resources:
        limits:
          memory: 400M
    restart: unless-stopped
    ports:
      - "${JAEGER_PORT}" # Jaeger UI
      - "${OTEL_COLLECTOR_PORT_GRPC}"
    environment:
      - METRICS_STORAGE_TYPE=prometheus
    logging: *logging

  # OpenTelemetry Collector
  otel-collector:
    image: ${COLLECTOR_CONTRIB_IMAGE}
    container_name: otel-collector
    deploy:
      resources:
        limits:
          memory: 200M
    restart: unless-stopped
    command: [ "--config=/etc/otelcol-config.yml", "--config=/etc/otelcol-config-extras.yml" ]
    user: 0:0
    volumes:
      - ${HOST_FILESYSTEM}:/hostfs:ro
      - ${DOCKER_SOCK}:/var/run/docker.sock:ro
      - ${OTEL_COLLECTOR_CONFIG}:/etc/otelcol-config.yml
      - ${OTEL_COLLECTOR_CONFIG_EXTRAS}:/etc/otelcol-config-extras.yml
    ports:
      - "${OTEL_COLLECTOR_PORT_GRPC}"
      - "${OTEL_COLLECTOR_PORT_HTTP}"
    depends_on:
      jaeger:
        condition: service_started
    logging: *logging
    environment:
      - ENVOY_PORT
      - HOST_FILESYSTEM
      - OTEL_COLLECTOR_HOST
      - OTEL_COLLECTOR_PORT_GRPC
      - OTEL_COLLECTOR_PORT_HTTP
